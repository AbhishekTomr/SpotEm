{"ast":null,"code":"var _jsxFileName = \"/Users/abhishek/Desktop/quiz-me/src/components/StartQuiz/StartQuiz.js\",\n    _s = $RefreshSig$();\n\nimport Button from '../UI/Button/Button';\nimport styles from './StartQuiz.module.css';\nimport Input from '../UI/Input/Input';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\nimport UserActions from '../../store/userslice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet StartQuiz = props => {\n  _s();\n\n  let dispatchFn = useDispatch();\n  let id = useSelector(state => state.userInfo.length + 1);\n  let [uname, changeUname] = useState('');\n  let [ques, changeQues] = useState(10);\n\n  let ValidateMe = (element1, type) => {\n    if (element1.value.trim() == '' && type == 'text') {\n      element1.classList.add('invalid');\n      changeUname(element1.value);\n    } else {\n      element1.classList.remove('invalid');\n      changeUname(element1.value);\n    }\n\n    if (element1.value == '' && type == 'num') {\n      element1.classList.add('invalid');\n      changeUname(element1.value);\n    }\n  };\n\n  let startGame = () => {\n    props.startQuiz(1);\n    let newUser = {\n      id: id,\n      uname: uname,\n      gameState: 1,\n      questions: ques\n    };\n    dispatchFn(UserActions.setData({\n      newUser\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles[\"start-info\"],\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.user} ${styles.feild}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"user-name\",\n        children: \"User Name : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        data: {\n          type: 'text',\n          id: 'user-name',\n          name: 'user-name',\n          className: styles.inp,\n          value: uname,\n          onBlur: e => {\n            ValidateMe(e.target, 'text');\n          },\n          onChange: e => {\n            ValidateMe(e.target, 'text');\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${styles.ques} ${styles.feild}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"ques\",\n        children: \"No of Questions : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        data: {\n          type: 'number',\n          min: 1,\n          max: 20,\n          id: 'ques',\n          name: 'ques',\n          className: styles.inp,\n          value: ques,\n          onBlur: e => {\n            ValidateMe(e.target, 'num');\n          },\n          onChange: e => {\n            ValidateMe(e.target, 'text');\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      data: {\n        'type': 'button',\n        'className': styles.btn,\n        onClick: startGame\n      },\n      children: \"Start Quiz\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 13\n  }, this);\n};\n\n_s(StartQuiz, \"KmjK2qBz7o+mPfrQjyxi8rsx5HU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = StartQuiz;\nexport default StartQuiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"StartQuiz\");","map":{"version":3,"sources":["/Users/abhishek/Desktop/quiz-me/src/components/StartQuiz/StartQuiz.js"],"names":["Button","styles","Input","useDispatch","useSelector","useState","UserActions","StartQuiz","props","dispatchFn","id","state","userInfo","length","uname","changeUname","ques","changeQues","ValidateMe","element1","type","value","trim","classList","add","remove","startGame","startQuiz","newUser","gameState","questions","setData","user","feild","name","className","inp","onBlur","e","target","onChange","min","max","btn","onClick"],"mappings":"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","sourcesContent":["import Button from '../UI/Button/Button'\nimport styles from './StartQuiz.module.css'\nimport Input from '../UI/Input/Input'\nimport {useDispatch, useSelector} from 'react-redux';\nimport { useState } from 'react';\nimport UserActions from '../../store/userslice'\n\nlet StartQuiz = (props) =>{ \n    let dispatchFn = useDispatch();\n    let id = useSelector((state)=>state.userInfo.length+1);\n    let [uname,changeUname] = useState('');\n    let [ques,changeQues] = useState (10);\n\n    let ValidateMe = (element1,type) => {\n        if(element1.value.trim()==''&&type=='text')\n        {\n            element1.classList.add('invalid');\n            changeUname(element1.value)\n        }\n        else{\n            element1.classList.remove('invalid');\n            changeUname(element1.value)\n        }\n        if(element1.value==''&&type=='num')\n        {\n            element1.classList.add('invalid');\n            changeUname(element1.value)\n        }\n    }\n    let startGame = () => {\n        props.startQuiz(1);\n        let newUser = {\n            id : id,\n            uname : uname,\n            gameState : 1,\n            questions : ques,\n        }\n        dispatchFn(UserActions.setData({newUser}))\n    }\n    return(\n            <div className={styles[\"start-info\"]}>\n            <div className={`${styles.user} ${styles.feild}`}>\n            <label htmlFor='user-name'>User Name : </label>\n            <Input data={{type:'text',id:'user-name',name:'user-name',className:styles.inp,value:uname,onBlur:(e)=>{ValidateMe(e.target,'text')},onChange:(e)=>{ValidateMe(e.target,'text')}}}></Input>\n            </div>\n            <div className={`${styles.ques} ${styles.feild}`}>\n            <label htmlFor='ques'>No of Questions : </label>\n            <Input data={{type:'number',min:1,max:20,id:'ques',name:'ques',className:styles.inp,value:ques,onBlur:(e)=>{ValidateMe(e.target,'num')},onChange:(e)=>{ValidateMe(e.target,'text')}}}></Input>\n            </div>\n            <Button data = {{'type':'button','className': styles.btn, onClick: startGame}}>Start Quiz</Button>\n            </div>\n    )\n} \n\nexport default StartQuiz;"]},"metadata":{},"sourceType":"module"}