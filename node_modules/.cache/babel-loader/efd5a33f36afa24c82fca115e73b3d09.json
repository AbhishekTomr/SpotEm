{"ast":null,"code":"var _jsxFileName = \"/Users/abhishek/Desktop/quiz-me/src/components/Questions/Questions.js\";\nimport { Fragment, useEffect, useState, useRef } from 'react';\nimport styles from '../PlayQuiz/PlayQuiz.module.css';\nimport Button from '../UI/Button/Button';\nimport Input from '../UI/Input/Input';\nimport { useDispatch } from 'react-redux';\nimport UserActions from '../../store/userslice';\nimport React from 'react';\nimport Image from \"../UI/Image/Image\"; // let returnOp=(a,b,opr)=>{\n//     switch(opr)\n//     {\n//         case '+' : \n//         return (a+b);\n//         case '-' : \n//         return (a-b);\n//         case '/' : \n//         return Math.floor(a/b);\n//         case 'x' : \n//         return (a*b);\n//         default :\n//         return 'n.a'\n//     }\n// }\n// let Question = (props) => {\n//     let no = props.Qno;\n//     let op1 = props.Question.op1;\n//     let op2 = props.Question.op2;\n//     let oprOption = ['+','-','/','x'];\n//     let opr = oprOption[props.Question.opr-1];\n//     let ans = returnOp(op1,op2,opr);\n//     let [ansInp,changeAnsInp] = useState('');\n//     let isFinal = (no==props.total-1)?true:false;\n//     let [isCorrect,changeIsCorrect] = useState(false);\n//     let [isIncorrect,changeIsIncorrect] = useState(false);\n//     let [isAnswered,changeIsAnswered] = useState(false);\n//     let dispatchFn = useDispatch();\n//     let next = useRef();\n//     let finish = useRef();\n//     let inp = useRef();\n//     let checkAnswer =(flag)=>{\n//          inp.current.setAttribute('disabled','true');\n//          //checkAns\n//         let data = ansInp;\n//         if(data.trim().length==0)\n//             {\n//                 changeIsAnswered(false);\n//                 changeIsCorrect(false);\n//                 changeIsIncorrect(true);\n//             }\n//             else if(data==ans)\n//             {   changeIsAnswered(true);\n//                 changeIsIncorrect(false);\n//                 changeIsCorrect(true);\n//             }\n//             else{\n//                 changeIsAnswered(true);\n//                 changeIsCorrect(false);\n//                 changeIsIncorrect(true);\n//             }\n//         if(flag){\n//             //when next Question is pressed;\n//             changeAnsInp('');\n//             inp.current.removeAttribute('disabled');\n//             dispatchFn(UserActions.changeAns({id:no,user:props.user,isAns:isAnswered}));\n//             dispatchFn(UserActions.changeCorrect({id:no,user:props.user,isCorrect:isCorrect}));\n//             props.nextQues();\n//         }\n//     }\n//     useEffect(()=>{\n//         changeIsAnswered(false);\n//         changeIsCorrect(false);\n//         changeIsIncorrect(false);\n//         inp.current.focus();\n//     },[no]);\n//     return (\n//     <Fragment>\n//             <div id='quesNo' className={styles.questionNo}>Question Number : {no+1}</div>\n//             <div id='question' className={styles.question}>\n//             <div className={styles.op} id='op1'>{op1}</div>\n//             <div id='operand' className={styles.op}>{opr}</div>\n//             <div className={styles.op} id='op2'>{op2}</div>\n//             <div className={styles.op}>=</div>\n//             <Input data={{className:styles.opr,id:'op3',value:ansInp,ref:inp,onChange:(e)=>{changeAnsInp(e.target.value)},disabled:false}}></Input>\n//             </div>\n//             <div id='correctAns' className={styles.correct}>\n//             {isCorrect && <p className={styles.correctAns}>Correct Answer !</p>}\n//             {isIncorrect && <p className={styles.wrongAns}>Wrong Answer, Correct Answer is {ans}</p>}\n//             </div>\n//             <div className={styles[\"btn-wrap\"]}>\n//             <Button data={{id:'checkAns',className:styles.btn,onClick:()=>{checkAnswer(false)}}}>Submit Answer</Button>\n//             {!isFinal && <Button data={{id:'nextQues',className:styles.btn,ref:next,onClick:()=>{checkAnswer(true)}}}>Next Question</Button>}\n//             {isFinal && <Button data={{id:'finishQues',className:styles.btn,ref:finish,onClick:()=>{checkAnswer(true)}}}>Finish Quiz</Button>}\n//             </div>\n//     </Fragment>\n// )\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet Question = props => {\n  console.log(\"these are the props\", props);\n  let Qno = props.Qno + 1;\n  let img1 = props.Question.question[0];\n  let img2 = props.Question.question[1];\n  let isFinal = Qno == props.total - 1 ? true : false;\n  console.log(img1, img2);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quesNo\",\n      className: styles.questionNo,\n      children: [\"Question Number : \", Qno]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"question\",\n      className: styles.question,\n      children: [/*#__PURE__*/_jsxDEV(Image, {\n        src: img1.img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        src: img2.img\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"correctAns\",\n      className: styles.correct,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.correctAns,\n        children: \"Correct Answer !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: styles.wrongAns,\n        children: \"Wrong Answer, Correct Answer is \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles[\"btn-wrap\"],\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        data: {\n          id: 'nextQues',\n          className: styles.btn\n        },\n        children: \"Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        data: {\n          id: 'finishQues',\n          className: styles.btn\n        },\n        children: \"Finish Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/abhishek/Desktop/quiz-me/src/components/Questions/Questions.js"],"names":["Fragment","useEffect","useState","useRef","styles","Button","Input","useDispatch","UserActions","React","Image","Question","props","console","log","Qno","img1","question","img2","isFinal","total","questionNo","img","correct","correctAns","wrongAns","id","className","btn"],"mappings":"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","sourcesContent":["import { Fragment, useEffect, useState,useRef } from 'react'\nimport styles from '../PlayQuiz/PlayQuiz.module.css'\nimport Button from '../UI/Button/Button'\nimport Input from '../UI/Input/Input';\nimport {useDispatch} from 'react-redux';\nimport UserActions from '../../store/userslice'\nimport React from 'react';\nimport Image from \"../UI/Image/Image\"\n\n// let returnOp=(a,b,opr)=>{\n//     switch(opr)\n//     {\n//         case '+' : \n//         return (a+b);\n        \n//         case '-' : \n//         return (a-b);\n        \n//         case '/' : \n//         return Math.floor(a/b);\n        \n//         case 'x' : \n//         return (a*b);\n        \n//         default :\n//         return 'n.a'\n//     }\n// }\n\n// let Question = (props) => {\n\n//     let no = props.Qno;\n//     let op1 = props.Question.op1;\n//     let op2 = props.Question.op2;\n//     let oprOption = ['+','-','/','x'];\n//     let opr = oprOption[props.Question.opr-1];\n//     let ans = returnOp(op1,op2,opr);\n//     let [ansInp,changeAnsInp] = useState('');\n//     let isFinal = (no==props.total-1)?true:false;\n//     let [isCorrect,changeIsCorrect] = useState(false);\n//     let [isIncorrect,changeIsIncorrect] = useState(false);\n//     let [isAnswered,changeIsAnswered] = useState(false);\n//     let dispatchFn = useDispatch();\n//     let next = useRef();\n//     let finish = useRef();\n//     let inp = useRef();\n    \n//     let checkAnswer =(flag)=>{\n//          inp.current.setAttribute('disabled','true');\n//          //checkAns\n//         let data = ansInp;\n//         if(data.trim().length==0)\n//             {\n//                 changeIsAnswered(false);\n//                 changeIsCorrect(false);\n//                 changeIsIncorrect(true);\n//             }\n//             else if(data==ans)\n//             {   changeIsAnswered(true);\n//                 changeIsIncorrect(false);\n//                 changeIsCorrect(true);\n//             }\n//             else{\n//                 changeIsAnswered(true);\n//                 changeIsCorrect(false);\n//                 changeIsIncorrect(true);\n//             }\n//         if(flag){\n//             //when next Question is pressed;\n//             changeAnsInp('');\n//             inp.current.removeAttribute('disabled');\n//             dispatchFn(UserActions.changeAns({id:no,user:props.user,isAns:isAnswered}));\n//             dispatchFn(UserActions.changeCorrect({id:no,user:props.user,isCorrect:isCorrect}));\n//             props.nextQues();\n//         }\n//     }\n//     useEffect(()=>{\n//         changeIsAnswered(false);\n//         changeIsCorrect(false);\n//         changeIsIncorrect(false);\n//         inp.current.focus();\n//     },[no]);\n//     return (\n    //     <Fragment>\n    //             <div id='quesNo' className={styles.questionNo}>Question Number : {no+1}</div>\n    //             <div id='question' className={styles.question}>\n    //             <div className={styles.op} id='op1'>{op1}</div>\n    //             <div id='operand' className={styles.op}>{opr}</div>\n    //             <div className={styles.op} id='op2'>{op2}</div>\n    //             <div className={styles.op}>=</div>\n    //             <Input data={{className:styles.opr,id:'op3',value:ansInp,ref:inp,onChange:(e)=>{changeAnsInp(e.target.value)},disabled:false}}></Input>\n    //             </div>\n    //             <div id='correctAns' className={styles.correct}>\n    //             {isCorrect && <p className={styles.correctAns}>Correct Answer !</p>}\n    //             {isIncorrect && <p className={styles.wrongAns}>Wrong Answer, Correct Answer is {ans}</p>}\n    //             </div>\n    //             <div className={styles[\"btn-wrap\"]}>\n    //             <Button data={{id:'checkAns',className:styles.btn,onClick:()=>{checkAnswer(false)}}}>Submit Answer</Button>\n    //             {!isFinal && <Button data={{id:'nextQues',className:styles.btn,ref:next,onClick:()=>{checkAnswer(true)}}}>Next Question</Button>}\n    //             {isFinal && <Button data={{id:'finishQues',className:styles.btn,ref:finish,onClick:()=>{checkAnswer(true)}}}>Finish Quiz</Button>}\n    //             </div>\n    //     </Fragment>\n    // )\n// }\n\n\nlet Question = (props) =>{\n    console.log(\"these are the props\",props)\n    let Qno = props.Qno +1;\n    let img1 = props.Question.question[0];\n    let img2 = props.Question.question[1];\n    let isFinal = (Qno==props.total-1)?true:false;\n    console.log(img1,img2);\n    return (\n        <Fragment>\n        <div id='quesNo' className={styles.questionNo}>Question Number : {Qno}</div>\n        <div id='question' className={styles.question}>\n        <Image src={img1.img}></Image>\n        <Image src={img2.img}></Image>\n        </div>\n        <div id='correctAns' className={styles.correct}>\n        <p className={styles.correctAns}>Correct Answer !</p>\n        <p className={styles.wrongAns}>Wrong Answer, Correct Answer is </p>\n        </div>\n        <div className={styles[\"btn-wrap\"]}>\n        <Button data={{id:'nextQues',className:styles.btn}}>Next Question</Button>\n        <Button data={{id:'finishQues',className:styles.btn}}>Finish Quiz</Button>\n        </div>\n</Fragment>\n)\n    \n}\n\nexport default Question;"]},"metadata":{},"sourceType":"module"}